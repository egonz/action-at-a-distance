{
  "name": "cucumber",
  "description": "The official JavaScript implementation of Cucumber.",
  "keywords": [
    "testing",
    "bdd",
    "cucumber",
    "gherkin",
    "tests"
  ],
  "version": "0.3.0",
  "homepage": "http://github.com/cucumber/cucumber-js",
  "author": {
    "name": "Julien Biezemans",
    "email": "jb@jbpros.com",
    "url": "http://jbpros.net"
  },
  "contributors": [
    {
      "name": "Julien Biezemans",
      "email": "jb@jbpros.com",
      "url": "http://jbpros.net"
    },
    {
      "name": "Fernando Acorreia",
      "email": "fernandoacorreia@gmail.com"
    },
    {
      "name": "Paul Jensen",
      "email": "paulbjensen@gmail.com"
    },
    {
      "name": "Kushal Pisavadia"
    },
    {
      "name": "Olivier Melcher",
      "email": "olivier.melcher@gmail.com"
    },
    {
      "name": "Tristan Dunn",
      "email": "tristanzdunn@gmail.com"
    },
    {
      "name": "Ted de Koning"
    },
    {
      "name": "Renier Morales",
      "email": "renier@morales-rodriguez.net"
    },
    {
      "name": "Aslak Helles√∏y",
      "email": "aslak.hellesoy@gmail.com"
    },
    {
      "name": "Aaron Garvey"
    },
    {
      "name": "Omar Gonzalez",
      "email": "omar@almerblank.com"
    },
    {
      "name": "Chris Young",
      "email": "chris@chrisyoung.org"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/cucumber/cucumber-js.git"
  },
  "bugs": {
    "email": "cukes@googlegroups.com",
    "url": "http://github.com/cucumber/cucumber-js/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/cucumber",
  "engines": {
    "node": "0.6 || 0.7 || 0.8"
  },
  "dependencies": {
    "gherkin": "2.11.3",
    "jasmine-node": "1.0.26",
    "connect": "2.3.2",
    "browserify": "1.15.5",
    "nopt": "1.0.10",
    "underscore": "1.3.3",
    "rimraf": "2.0.2",
    "mkdirp": "0.3.3",
    "cucumber-html": "0.2.0",
    "walkdir": "0.0.4",
    "coffee-script": "1.3.3"
  },
  "scripts": {
    "test": "./bin/cucumber.js && jasmine-node spec"
  },
  "bin": {
    "cucumber.js": "./bin/cucumber.js",
    "cucumber-js": "./bin/cucumber.js"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/cucumber/cucumber.js/LICENSE"
    }
  ],
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "# Cucumber.js [![Build Status](https://secure.travis-ci.org/cucumber/cucumber-js.png?branch=master)](http://travis-ci.org/cucumber/cucumber-js)\n\n*Cucumber*, the [popular Behaviour-Driven Development tool](http://cukes.info), brought to your JavaScript stack.\n\nIt runs on both Node.js and *modern* web browsers.\n\n**Try it now: [http://cucumber.no.de](http://cucumber.no.de)!**\n\n## Development status\n\nCucumber.js is still a work in progress. Here is its current status.\n\n### Cucumber Technology Compatibility Kit\n\n<table>\n  <thead>\n    <tr><th>Feature</th><th>Status</th></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/core.feature\">Core</a> (scenarios, steps, mappings)</td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/background.feature\">Background</a></td>\n      <td>Done<sup>1</sup></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/calling_steps_from_step_defs.feature\">Calling steps from step defs</a></td>\n      <td>To do</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/comments.feature\">Comments</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/command_line_interface.feature\">Command-line interface</a></td>\n      <td>Done<sup>1, 2</sup></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/command_line_options.feature\">Command-line options</a></td>\n      <td>Todo<sup>2</sup></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/data_tables.feature\">Data tables</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/doc_strings.feature\">Doc strings</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/failing_steps.feature\">Failing steps</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/hooks.feature\">Hooks</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/i18n.feature\">I18n</a></td>\n      <td>To do</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/json_formatter.feature\">JSON formatter</a></td>\n      <td>WIP<sup>3</sup></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/pretty_formatter.feature\">Pretty formatter</a></td>\n      <td>WIP<sup>2</sup></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/scenario_outlines_and_examples.feature\">Scenario outlines and examples</a></td>\n      <td>To do</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/stats_collector.feature\">Stats collector</a></td>\n      <td>To do</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/step_argument_transforms.feature\">Step argument transforms</a></td>\n      <td>To do</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/tags.feature\">Tags</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/undefined_steps.feature\">Undefined steps</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/wire_protocol.feature\">Wire protocol</a></td>\n      <td>To do</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-tck/blob/master/world.feature\">World</a></td>\n      <td>Done</td>\n    </tr>\n  </tbody>\n</table>\n\n1. Not certified by [Cucumber TCK](https://github.com/cucumber/cucumber-tck) yet.\n2. Considered for removal from [Cucumber TCK](https://github.com/cucumber/cucumber-tck).\n3. Missing 'matches' attributes. Simple wrapper for *Gherkin*'s `JsonFormatter` pending porting of:\n\n  * https://github.com/cucumber/gherkin/blob/master/lib/gherkin/listener/formatter_listener.rb\n  * https://github.com/cucumber/gherkin/blob/master/lib/gherkin/formatter/filter_formatter.rb\n\n  in Gherkin itself.\n\n### Cucumber.js-specific features\n\n<table>\n  <thead>\n    <tr><th>Feature</th><th>Status</th></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-js/blob/master/features/background.feature\">Background</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-js/blob/master/features/coffeescript_support.feature\">CoffeeScript support</a></td>\n      <td>Done</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/cucumber/cucumber-js/blob/master/features/cli.featur\">Command-line interface</a></td>\n      <td>Done</td>\n    </tr>\n  </tbody>\n</table>\n\n1. Will be certified by [Cucumber TCK](https://github.com/cucumber/cucumber-tck).\n\n## Prerequesites\n\n* [Node.js](http://nodejs.org)\n* [NPM](http://npmjs.org)\n\nCucumber.js is tested on:\n\n* Node.js 0.6 and 0.8 (see [CI builds](http://travis-ci.org/#!/cucumber/cucumber-js))\n* Google Chrome\n* Firefox\n* Safari\n* Opera\n\nThere are plans to have CI builds on browsers too.\n\n## Usage\n\n### Install\n\nCucumber.js is available as an npm module.\n\nInstall globally with:\n\n``` shell\n$ npm install -g cucumber\n```\n\nOR\n\nYou may also define cucumber.js as a development dependency of your application by including it in a package.json file.\n\n``` json\n// package.json\n\n{ \"devDependencies\" : {\n    \"cucumber\": \"latest\"\n  }\n}\n```\n\nThen install with `npm install --dev`\n\n\n### Features\n\nFeatures are written with the [Gherkin syntax](https://github.com/cucumber/cucumber/wiki/Gherkin)\n\n``` gherkin\n# features/myFeature.feature\n\nFeature: Example feature\n  As a user of cucumber.js\n  I want to have documentation on cucumber\n  So that I can concentrate on building awesome applications\n\n  Scenario: Reading documentation\n    Given I am on the Cucumber.js Github repository\n    When I go to the README file\n    Then I should see \"Usage\" as the page title\n```\n\n### Support Files\n\nSupport files let you setup the environment in which steps will be run, and define step definitions. Both JavaScript (`.js`) and CoffeeScript (`.coffee`) source files are supported.\n\n#### World\n\n*World* is a constructor function with utility properties, destined to be used in step definitions:\n\n``` javascript\n// features/support/world.js\n\nvar zombie = require('zombie');\nvar World = function World(callback) {\n  this.browser = new zombie.Browser(); // this.browser will be available in step definitions\n\n  this.visit = function(url, callback) {\n    this.browser.visit(url, callback);\n  };\n\n  callback(); // tell Cucumber we're finished and to use 'this' as the world instance\n};\nexports.World = World;\n```\n\nIt is possible to tell Cucumber to use another object instance than the constructor:\n\n``` javascript\n// features/support/world.js\n\nvar zombie = require('zombie');\nvar WorldConstructor = function WorldConstructor(callback) {\n  this.browser = new zombie.Browser(); // this.browser will be available in step definitions\n\n  var world = {\n    visit: function(url, callback) {\n      this.browser.visit(url, callback);\n    }\n  };\n\n  callback(world); // tell Cucumber we're finished and to use our world object instead of 'this'\n};\nexports.World = WorldConstructor;\n```\n\n#### Step Definitions\n\nStep definitions are the glue between features written in Gherkin and the actual *SUT* (*system under test*). They are written in JavaScript.\n\nAll step definitions will run with `this` set to what is known as the *[World](https://github.com/cucumber/cucumber/wiki/A-Whole-New-World)* in Cucumber. It's an object exposing useful methods, helpers and variables to your step definitions. A new instance of `World` is created before each scenario.\n\nStep definitions are contained within one or more wrapper functions.\n\nThose wrappers are run before executing the feature suite. `this` is an object holding important properties like the `Given()`, `When()` and `Then()` functions. Another notable property is `World`; it contains a default `World` constructor that can be either extended or replaced.\n\nStep definitions are run when steps match their name. `this` is an instance of `World`.\n\n``` javascript\n// features/step_definitions/myStepDefinitions.js\n\nvar myStepDefinitionsWrapper = function () {\n  this.World = require(\"../support/world.js\").World; // overwrite default World constructor\n\n  this.Given(/^I am on the Cucumber.js Github repository$/, function(callback) {\n    // Express the regexp above with the code you wish you had.\n    // `this` is set to a new this.World instance.\n    // i.e. you may use this.browser to execute the step:\n\n    this.visit('http://github.com/cucumber/cucumber-js', callback);\n\n    // The callback is passed to visit() so that when the job's finished, the next step can\n    // be executed by Cucumber.\n  });\n\n  this.When(/^I go to the README file$/, function(callback) {\n    // Express the regexp above with the code you wish you had. Call callback() at the end\n    // of the step, or callback.pending() if the step is not yet implemented:\n\n    callback.pending();\n  });\n\n  this.Then(/^I should see \"(.*)\" as the page title$/, function(title, callback) {\n    // matching groups are passed as parameters to the step definition\n\n    if (!this.isOnPageWithTitle(title))\n      // You can make steps fail by calling the `fail()` function on the callback:\n      callback.fail(new Error(\"Expected to be on page with title \" + title));\n    else\n      callback();\n  });\n};\n\nmodule.exports = myStepDefinitionsWrapper;\n```\n\nIt is also possible to use simple strings instead of regexps as step definition patterns:\n\n```javascript\nthis.Then('I should see \"$title\" as the page title', function(title, callback) {\n  // the above string is converted to the following Regexp by Cucumber:\n  // /^I should see \"([^\"]*)\" as the page title$/\n\n  if (!this.isOnPageWithTitle(title))\n    // You can make steps fail by calling the `fail()` function on the callback:\n    callback.fail(new Error(\"Expected to be on page with title \" + title));\n  else\n    callback();\n});\n```\n\n`'I have $count \"$string\"'` would translate to `/^I have (.*) \"([^\"]*)\")$/`.\n\n#### Hooks\n\nHooks can be used to prepare and clean the environment before and after each scenario is executed.\n\n##### Before hooks\n\nTo run something before every scenario, use before hooks:\n\n``` javascript\n// features/support/hooks.js (this path is just a suggestion)\n\nvar myHooks = function () {\n  this.Before(function(callback) {\n    // Just like inside step definitions, \"this\" is set to a World instance.\n    // It's actually the same instance the current scenario step definitions\n    // will receive.\n\n    // Let's say we have a bunch of \"maintenance\" methods available on our World\n    // instance, we can fire some to prepare the application for the next\n    // scenario:\n\n    this.bootFullTextSearchServer();\n    this.createSomeUsers();\n\n    // Don't forget to tell Cucumber when you're done:\n    callback();\n  });\n};\n\nmodule.exports = myHooks;\n```\n\n##### After hooks\n\nThe *before hook* counterpart is the *after hook*. It's similar in shape but is executed, well, *after* every scenario:\n\n```javascript\n// features/support/after_hooks.js\n\nvar myAfterHooks = function () {\n  this.After(function(callback) {\n    // Again, \"this\" is set to the World instance the scenario just finished\n    // playing with.\n\n    // We can then do some cleansing:\n\n    this.emptyDatabase();\n    this.shutdownFullTextSearchServer();\n\n    // Release control:\n    callback();\n  });\n};\n\nmodule.exports = myAfterHooks;\n```\n\n##### Around hooks\n\nIt's also possible to combine both before and around hooks in one single definition with the help of *around hooks*:\n\n```javascript\n// features/support/advanced_hooks.js\n\nmyAroundHooks = function() {\n  this.Around(function(runScenario) {\n    // \"this\" is - as always - an instance of World promised to the scenario.\n\n    // First do the \"before scenario\" tasks:\n\n    this.bootFullTextSearchServer();\n    this.createSomeUsers();\n\n    // When the \"before\" duty is finished, tell Cucumber to execute the scenario\n    // and pass a function to be called when the scenario is finished:\n\n    runScenario(function(callback) {\n      // Now, we can do our \"after scenario\" stuff:\n\n      this.emptyDatabase();\n      this.shutdownFullTextSearchServer();\n\n      // Tell Cucumber we're done:\n      callback();\n    });\n  });\n};\n\nmodule.exports = myAroundHooks;\n```\n\n##### Tagged hooks\n\nHooks can be conditionally elected for execution based on the tags of the scenario.\n\n``` javascript\n// features/support/hooks.js (this path is just a suggestion)\n\nvar myHooks = function () {\n  this.Before(\"@foo\", \"@bar,@baz\", function(callback) {\n    // This hook will be executed before scenarios tagged with @foo and either\n    // @bar or @baz.\n\n    // ...\n\n    callback();\n  });\n};\n\nmodule.exports = myHooks;\n```\n\n### Run cucumber\n\nCucumber.js includes a binary file to execute the features.\n\nIf you installed cucumber.js globally, you may run it with:\n\n``` shell\n$ cucumber.js\n```\n\nYou may specify the features to run:\n\n``` shell\n$ cucumber.js features/my_feature.feature\n```\n\nAnd require specific step definitions and support code files with the --require option:\n\n``` shell\n$ cucumber.js features/my_feature.feature --require features/step_definitions/my_step_definitions.js\n```\n\nIf you installed Cucumber locally or with `npm install --dev`, you'll need to specify the path to the binary:\n\n``` shell\n$ ./node_modules/.bin/cucumber.js\n```\n\n**Note to Windows users:** invoke Cucumber.js with `cucumber-js` instead of `cucumber.js`. The latter is causing the operating system to invoke JScript instead of Node.js, because of the so-called file extension.\n\n### Examples\n\nA few example apps are available for you to browse:\n\n* [Rails app serving features in the browser](https://github.com/jbpros/cucumber-js-example)\n* [Express.js app running features in the cli](https://github.com/olivoil/NodeBDD)\n* [Try cucumber.js in the browser](http://cucumber.no.de/)\n\n## Contribute\n\nSee [CONTRIBUTE](https://github.com/cucumber/cucumber-js/blob/master/CONTRIBUTE.md).\n\n## Help & support\n\n* Twitter: [@cucumber_js](https://twitter.com/#!/cucumber_js/)\n* IRC: [#cucumber](http://webchat.freenode.net?channels=cucumber&uio=d4) on Freenode\n* Google Groups: [cukes](https://groups.google.com/group/cukes)\n* [cukes.info](http://cukes.info)\n",
  "readmeFilename": "README.md",
  "_id": "cucumber@0.3.0",
  "_from": "cucumber@*"
}
