
/* line 1 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */



/* line 11 "js/lib/gherkin/lexer/de.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 133, 140, 142, 144, 146, 148, 150, 
	152, 154, 156, 158, 160, 162, 164, 166, 
	168, 170, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 218, 220, 
	222, 224, 226, 228, 230, 232, 234, 236, 
	238, 240, 242, 244, 246, 248, 250, 252, 
	254, 256, 258, 260, 262, 264, 266, 268, 
	270, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 323, 325, 327, 329, 331, 333, 
	335, 337, 339, 341, 342, 343, 344, 345, 
	346, 347, 348, 349, 350, 351, 352, 353, 
	354, 355, 356, 357, 358, 359, 360, 375, 
	377, 379, 381, 383, 385, 387, 389, 391, 
	393, 395, 397, 399, 401, 403, 405, 408, 
	410, 412, 414, 416, 418, 420, 422, 424, 
	426, 428, 430, 432, 434, 436, 438, 440, 
	442, 444, 446, 448, 450, 452, 454, 456, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 486, 488, 
	490, 492, 494, 496, 499, 501, 503, 505, 
	507, 509, 511, 513, 515, 517, 519, 521, 
	522, 523, 524, 525, 526, 527, 528, 530, 
	531, 532, 547, 549, 551, 553, 555, 557, 
	559, 561, 563, 565, 567, 569, 571, 573, 
	575, 577, 580, 582, 584, 586, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 630, 632, 634, 637, 639, 
	641, 643, 645, 647, 649, 651, 653, 655, 
	657, 659, 661, 663, 665, 667, 669, 671, 
	673, 675, 677, 679, 681, 683, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 704, 
	706, 708, 709, 710, 711, 712, 713, 714, 
	715, 716, 717, 718, 719, 734, 736, 738, 
	740, 742, 744, 746, 748, 750, 752, 754, 
	756, 758, 760, 762, 764, 767, 769, 771, 
	773, 775, 777, 779, 781, 783, 785, 787, 
	789, 791, 793, 795, 797, 799, 801, 803, 
	805, 807, 809, 811, 813, 815, 817, 819, 
	821, 823, 825, 827, 829, 831, 833, 835, 
	837, 839, 841, 843, 845, 847, 849, 851, 
	853, 855, 857, 859, 861, 862, 863, 864, 
	868, 874, 877, 879, 885, 903, 904, 905
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 70, 71, 83, 85, 87, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 68, 70, 71, 83, 
	85, 87, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 98, 110, 
	101, 114, 103, 101, 110, 111, 109, 109, 
	101, 110, 101, 105, 115, 112, 105, 101, 
	108, 101, 58, 10, 10, 10, 32, 35, 
	70, 124, 9, 13, 10, 117, 10, 110, 
	10, 107, 10, 116, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, -61, 10, -92, 10, 10, 116, 
	10, 58, 10, 32, 34, 35, 37, 42, 
	64, 65, 66, 68, 70, 71, 83, 85, 
	87, 124, 9, 13, 97, 110, 117, 110, 
	107, 116, 105, 111, 110, 97, 108, 105, 
	116, -61, -92, 116, 58, 10, 10, 10, 
	32, 35, 37, 64, 66, 70, 71, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 101, 
	10, 105, 10, 115, 10, 112, 10, 105, 
	10, 101, 10, 108, 10, 101, 10, 58, 
	10, 117, 10, 110, 10, 107, 10, 116, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-92, 10, 10, 116, 10, 114, 10, 117, 
	10, 110, 10, 100, 10, 108, 10, 97, 
	10, 103, 10, 122, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 58, 103, 10, 114, 10, 117, 10, 
	110, 10, 100, 10, 114, 10, 105, 10, 
	115, 10, 115, 101, 114, 103, 101, 98, 
	101, 110, 32, 115, 101, 105, 117, 110, 
	100, 108, 97, 103, 101, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 68, 
	70, 71, 83, 85, 87, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 98, 110, 
	10, 101, 10, 114, 10, 103, 10, 101, 
	10, 110, 10, 111, 10, 109, 10, 109, 
	10, 101, 10, 110, 10, 97, 10, 110, 
	10, 117, 10, 110, 10, 107, 10, 116, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-92, 10, 10, 116, 10, 58, 10, 101, 
	10, 103, 10, 101, 10, 98, 10, 101, 
	10, 110, 10, 32, 10, 115, 10, 101, 
	10, 105, 10, 122, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 58, 103, 10, 114, 10, 117, 10, 
	110, 10, 100, 10, 114, 10, 105, 10, 
	115, 10, 115, 10, 110, 10, 100, 10, 
	101, 122, 101, 110, 97, 114, 105, 111, 
	58, 103, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 68, 70, 71, 83, 85, 
	87, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 98, 110, 10, 101, 10, 114, 
	10, 103, 10, 101, 10, 110, 10, 111, 
	10, 109, 10, 109, 10, 101, 10, 110, 
	10, 97, 10, 110, 10, 117, 10, 110, 
	10, 107, 10, 116, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, -61, 10, -92, 10, 10, 116, 
	10, 58, 10, 101, 114, 10, 103, 10, 
	101, 10, 98, 10, 101, 10, 110, 10, 
	32, 10, 115, 10, 101, 10, 105, 10, 
	117, 10, 110, 10, 100, 10, 108, 10, 
	97, 10, 103, 10, 101, 10, 122, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 58, 103, 10, 114, 
	10, 117, 10, 110, 10, 100, 10, 114, 
	10, 105, 10, 115, 10, 115, 10, 110, 
	10, 100, 10, 101, 114, 117, 110, 100, 
	114, 105, 115, 115, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 68, 70, 
	71, 83, 85, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 98, 110, 10, 
	101, 10, 114, 10, 103, 10, 101, 10, 
	110, 10, 111, 10, 109, 10, 109, 10, 
	101, 10, 110, 10, 97, 10, 110, 10, 
	117, 10, 110, 10, 107, 10, 116, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -61, 10, -92, 
	10, 10, 116, 10, 58, 10, 101, 10, 
	103, 10, 101, 10, 98, 10, 101, 10, 
	110, 10, 32, 10, 115, 10, 101, 10, 
	105, 10, 122, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	110, 10, 100, 10, 101, 110, 100, 101, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 68, 70, 
	71, 83, 85, 87, 124, 9, 13, 187, 
	191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 16, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 2, 
	4, 3, 2, 4, 16, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 172, 174, 
	176, 178, 185, 188, 191, 194, 197, 200, 
	203, 206, 209, 212, 215, 218, 221, 224, 
	227, 230, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 297, 300, 
	303, 306, 309, 312, 315, 318, 321, 324, 
	327, 330, 333, 336, 339, 342, 345, 348, 
	351, 354, 357, 360, 363, 366, 369, 372, 
	375, 378, 381, 384, 387, 390, 393, 396, 
	399, 402, 405, 408, 411, 414, 417, 420, 
	423, 426, 429, 432, 435, 438, 441, 444, 
	447, 450, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 481, 483, 485, 487, 489, 
	491, 493, 495, 497, 499, 501, 503, 505, 
	507, 509, 511, 513, 515, 517, 519, 534, 
	537, 540, 543, 546, 549, 552, 555, 558, 
	561, 564, 567, 570, 573, 576, 579, 583, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 619, 622, 625, 628, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	658, 661, 664, 667, 670, 673, 676, 679, 
	682, 685, 688, 691, 694, 697, 700, 703, 
	706, 709, 712, 715, 719, 722, 725, 728, 
	731, 734, 737, 740, 743, 746, 749, 752, 
	754, 756, 758, 760, 762, 764, 766, 769, 
	771, 773, 788, 791, 794, 797, 800, 803, 
	806, 809, 812, 815, 818, 821, 824, 827, 
	830, 833, 837, 840, 843, 846, 849, 852, 
	855, 858, 861, 864, 867, 870, 873, 876, 
	879, 882, 885, 888, 891, 894, 897, 900, 
	903, 906, 909, 912, 915, 918, 922, 925, 
	928, 931, 934, 937, 940, 943, 946, 949, 
	952, 955, 958, 961, 964, 967, 970, 973, 
	976, 979, 982, 985, 988, 991, 995, 998, 
	1001, 1004, 1007, 1010, 1013, 1016, 1019, 1022, 
	1025, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 
	1042, 1044, 1046, 1048, 1050, 1065, 1068, 1071, 
	1074, 1077, 1080, 1083, 1086, 1089, 1092, 1095, 
	1098, 1101, 1104, 1107, 1110, 1114, 1117, 1120, 
	1123, 1126, 1129, 1132, 1135, 1138, 1141, 1144, 
	1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168, 
	1171, 1174, 1177, 1180, 1183, 1186, 1189, 1192, 
	1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 
	1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 
	1243, 1246, 1249, 1252, 1255, 1257, 1259, 1261, 
	1265, 1271, 1275, 1278, 1284, 1302, 1304, 1306
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 70, 0, 
	71, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 77, 0, 78, 0, 
	79, 0, 72, 0, 80, 0, 81, 0, 
	82, 0, 83, 0, 84, 0, 85, 0, 
	86, 0, 87, 0, 88, 0, 90, 89, 
	92, 91, 92, 93, 94, 95, 94, 93, 
	91, 92, 96, 91, 92, 97, 91, 92, 
	98, 91, 92, 99, 91, 92, 100, 91, 
	92, 101, 91, 92, 102, 91, 92, 103, 
	91, 92, 104, 91, 92, 105, 91, 92, 
	106, 91, 107, 92, 91, 108, 92, 91, 
	92, 109, 91, 92, 110, 91, 112, 111, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 111, 0, 
	127, 0, 79, 0, 128, 0, 129, 0, 
	130, 0, 131, 0, 132, 0, 133, 0, 
	134, 0, 135, 0, 136, 0, 137, 0, 
	138, 0, 139, 0, 140, 0, 141, 0, 
	142, 0, 144, 143, 146, 145, 146, 147, 
	148, 149, 148, 150, 151, 152, 153, 147, 
	145, 146, 154, 145, 146, 155, 145, 146, 
	156, 145, 146, 157, 145, 146, 158, 145, 
	146, 159, 145, 146, 160, 145, 146, 161, 
	145, 146, 162, 145, 146, 163, 145, 146, 
	164, 145, 146, 165, 145, 146, 166, 145, 
	146, 167, 145, 146, 168, 145, 146, 169, 
	145, 146, 170, 145, 146, 171, 145, 146, 
	172, 145, 146, 173, 145, 146, 174, 145, 
	146, 175, 145, 146, 176, 145, 146, 177, 
	145, 146, 178, 145, 146, 179, 145, 146, 
	180, 145, 146, 181, 145, 146, 182, 145, 
	146, 183, 145, 146, 184, 145, 146, 185, 
	145, 146, 186, 145, 146, 187, 145, 188, 
	146, 145, 189, 146, 145, 146, 175, 145, 
	146, 190, 145, 146, 191, 145, 146, 192, 
	145, 146, 193, 145, 146, 194, 145, 146, 
	195, 145, 146, 174, 145, 146, 196, 145, 
	146, 197, 145, 146, 198, 145, 146, 199, 
	145, 146, 200, 145, 146, 201, 145, 146, 
	202, 145, 146, 176, 203, 145, 146, 204, 
	145, 146, 205, 145, 146, 206, 145, 146, 
	207, 145, 146, 208, 145, 146, 209, 145, 
	146, 210, 145, 146, 175, 145, 211, 212, 
	0, 213, 0, 214, 0, 215, 0, 216, 
	0, 217, 0, 218, 0, 219, 0, 220, 
	0, 72, 0, 221, 0, 222, 0, 223, 
	0, 224, 0, 225, 0, 226, 0, 227, 
	0, 228, 0, 230, 229, 232, 231, 232, 
	233, 234, 235, 236, 234, 237, 238, 239, 
	240, 241, 242, 243, 233, 231, 232, 244, 
	231, 232, 245, 231, 232, 246, 231, 232, 
	247, 231, 232, 248, 231, 232, 249, 231, 
	232, 250, 231, 232, 251, 231, 232, 252, 
	231, 232, 253, 231, 232, 254, 231, 232, 
	255, 231, 232, 256, 231, 232, 257, 231, 
	232, 258, 231, 232, 259, 260, 231, 232, 
	261, 231, 232, 262, 231, 232, 263, 231, 
	232, 264, 231, 232, 265, 231, 232, 266, 
	231, 232, 267, 231, 232, 268, 231, 232, 
	269, 231, 232, 262, 231, 232, 270, 231, 
	232, 269, 231, 232, 271, 231, 232, 272, 
	231, 232, 273, 231, 232, 274, 231, 232, 
	275, 231, 232, 276, 231, 232, 277, 231, 
	232, 278, 231, 232, 279, 231, 232, 280, 
	231, 232, 281, 231, 282, 232, 231, 283, 
	232, 231, 232, 284, 231, 232, 258, 231, 
	232, 285, 231, 232, 286, 231, 232, 287, 
	231, 232, 288, 231, 232, 289, 231, 232, 
	290, 231, 232, 291, 231, 232, 292, 231, 
	232, 293, 231, 232, 262, 231, 232, 294, 
	231, 232, 295, 231, 232, 296, 231, 232, 
	297, 231, 232, 298, 231, 232, 299, 231, 
	232, 300, 231, 232, 258, 301, 231, 232, 
	302, 231, 232, 303, 231, 232, 304, 231, 
	232, 305, 231, 232, 306, 231, 232, 307, 
	231, 232, 308, 231, 232, 284, 231, 232, 
	309, 231, 232, 262, 231, 232, 270, 231, 
	310, 0, 311, 0, 312, 0, 313, 0, 
	314, 0, 315, 0, 316, 0, 317, 318, 
	0, 320, 319, 322, 321, 322, 323, 324, 
	325, 326, 324, 327, 328, 329, 330, 331, 
	332, 333, 323, 321, 322, 334, 321, 322, 
	335, 321, 322, 336, 321, 322, 337, 321, 
	322, 338, 321, 322, 339, 321, 322, 340, 
	321, 322, 341, 321, 322, 342, 321, 322, 
	343, 321, 322, 344, 321, 322, 345, 321, 
	322, 346, 321, 322, 347, 321, 322, 348, 
	321, 322, 349, 350, 321, 322, 351, 321, 
	322, 352, 321, 322, 353, 321, 322, 354, 
	321, 322, 355, 321, 322, 356, 321, 322, 
	357, 321, 322, 358, 321, 322, 359, 321, 
	322, 352, 321, 322, 360, 321, 322, 359, 
	321, 322, 361, 321, 322, 362, 321, 322, 
	363, 321, 322, 364, 321, 322, 365, 321, 
	322, 366, 321, 322, 367, 321, 322, 368, 
	321, 322, 369, 321, 322, 370, 321, 322, 
	371, 321, 372, 322, 321, 373, 322, 321, 
	322, 374, 321, 322, 348, 321, 322, 375, 
	376, 321, 322, 377, 321, 322, 378, 321, 
	322, 379, 321, 322, 380, 321, 322, 381, 
	321, 322, 382, 321, 322, 383, 321, 322, 
	384, 321, 322, 352, 321, 322, 385, 321, 
	322, 386, 321, 322, 387, 321, 322, 388, 
	321, 322, 389, 321, 322, 390, 321, 322, 
	374, 321, 322, 391, 321, 322, 392, 321, 
	322, 393, 321, 322, 394, 321, 322, 395, 
	321, 322, 396, 321, 322, 397, 321, 322, 
	348, 398, 321, 322, 399, 321, 322, 400, 
	321, 322, 401, 321, 322, 402, 321, 322, 
	403, 321, 322, 404, 321, 322, 405, 321, 
	322, 374, 321, 322, 406, 321, 322, 352, 
	321, 322, 360, 321, 407, 0, 408, 0, 
	409, 0, 410, 0, 411, 0, 412, 0, 
	413, 0, 414, 0, 415, 0, 417, 416, 
	419, 418, 419, 420, 421, 422, 423, 421, 
	424, 425, 426, 427, 428, 429, 430, 420, 
	418, 419, 431, 418, 419, 432, 418, 419, 
	433, 418, 419, 434, 418, 419, 435, 418, 
	419, 436, 418, 419, 437, 418, 419, 438, 
	418, 419, 439, 418, 419, 440, 418, 419, 
	441, 418, 419, 442, 418, 419, 443, 418, 
	419, 444, 418, 419, 445, 418, 419, 446, 
	447, 418, 419, 448, 418, 419, 449, 418, 
	419, 450, 418, 419, 451, 418, 419, 452, 
	418, 419, 453, 418, 419, 454, 418, 419, 
	455, 418, 419, 456, 418, 419, 449, 418, 
	419, 457, 418, 419, 456, 418, 419, 458, 
	418, 419, 459, 418, 419, 460, 418, 419, 
	461, 418, 419, 462, 418, 419, 463, 418, 
	419, 464, 418, 419, 465, 418, 419, 466, 
	418, 419, 467, 418, 419, 468, 418, 469, 
	419, 418, 470, 419, 418, 419, 471, 418, 
	419, 445, 418, 419, 472, 418, 419, 473, 
	418, 419, 474, 418, 419, 475, 418, 419, 
	476, 418, 419, 477, 418, 419, 478, 418, 
	419, 479, 418, 419, 480, 418, 419, 449, 
	418, 419, 481, 418, 419, 482, 418, 419, 
	483, 418, 419, 484, 418, 419, 485, 418, 
	419, 486, 418, 419, 471, 418, 419, 487, 
	418, 419, 449, 418, 419, 457, 418, 488, 
	0, 72, 0, 127, 0, 489, 490, 489, 
	0, 493, 492, 494, 495, 492, 491, 0, 
	497, 498, 496, 0, 497, 496, 493, 499, 
	497, 498, 499, 496, 493, 500, 501, 502, 
	503, 504, 505, 506, 507, 508, 509, 510, 
	511, 512, 513, 514, 500, 0, 515, 0, 
	1, 0, 516, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 46, 74, 76, 154, 247, 412, 414, 
	415, 421, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 423, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 38, 37, 
	29, 39, 40, 41, 42, 43, 44, 45, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 56, 57, 56, 57, 57, 2, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 69, 70, 71, 72, 73, 2, 
	2, 3, 13, 15, 29, 32, 35, 46, 
	74, 76, 154, 247, 412, 414, 415, 75, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 92, 93, 93, 2, 94, 108, 117, 
	131, 138, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 105, 106, 107, 2, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	73, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 132, 133, 
	134, 135, 136, 137, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 155, 164, 156, 157, 158, 
	159, 160, 161, 162, 163, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 173, 
	174, 174, 2, 175, 189, 190, 201, 203, 
	218, 228, 244, 246, 176, 177, 178, 179, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	188, 2, 73, 191, 193, 192, 189, 194, 
	195, 196, 197, 198, 199, 200, 202, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 215, 216, 217, 219, 220, 221, 
	222, 223, 224, 225, 226, 227, 229, 230, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 245, 248, 249, 
	250, 251, 252, 253, 254, 255, 337, 256, 
	257, 256, 257, 257, 2, 258, 272, 273, 
	284, 286, 301, 318, 334, 336, 259, 260, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 2, 73, 274, 276, 275, 
	272, 277, 278, 279, 280, 281, 282, 283, 
	285, 287, 288, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 302, 
	311, 303, 304, 305, 306, 307, 308, 309, 
	310, 312, 313, 314, 315, 316, 317, 319, 
	320, 321, 322, 323, 324, 325, 326, 327, 
	328, 329, 330, 331, 332, 333, 335, 338, 
	339, 340, 341, 342, 343, 344, 345, 346, 
	347, 348, 347, 348, 348, 2, 349, 363, 
	364, 375, 377, 392, 402, 409, 411, 350, 
	351, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 2, 73, 365, 367, 
	366, 363, 368, 369, 370, 371, 372, 373, 
	374, 376, 378, 379, 380, 381, 382, 383, 
	384, 385, 386, 387, 388, 389, 390, 391, 
	393, 394, 395, 396, 397, 398, 399, 400, 
	401, 403, 404, 405, 406, 407, 408, 410, 
	413, 415, 416, 417, 419, 420, 418, 416, 
	417, 418, 416, 419, 420, 3, 13, 15, 
	29, 32, 35, 46, 74, 76, 154, 247, 
	412, 414, 415, 422, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 81, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 31, 
	130, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 75, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 423;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

/* line 130 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

/* line 131 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      throw "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 778 "js/lib/gherkin/lexer/de.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */
  
/* line 785 "js/lib/gherkin/lexer/de.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1012 "js/lib/gherkin/lexer/de.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1051 "js/lib/gherkin/lexer/de.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/de.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/de', [], function() {
      return Lexer
    });
  } else {
    define('gherkin/lexer/de', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
