
/* line 1 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */



/* line 11 "js/lib/gherkin/lexer/bm.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 21, 41, 42, 43, 45, 47, 
	52, 57, 62, 67, 71, 75, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 95, 
	97, 102, 109, 114, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 139, 141, 
	143, 145, 147, 149, 151, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	193, 195, 197, 199, 201, 203, 205, 207, 
	209, 211, 213, 215, 217, 219, 221, 223, 
	225, 227, 229, 231, 233, 235, 237, 239, 
	241, 243, 245, 247, 249, 251, 253, 255, 
	257, 259, 261, 263, 265, 267, 269, 271, 
	273, 275, 277, 279, 281, 283, 285, 287, 
	289, 291, 293, 295, 297, 299, 301, 303, 
	305, 307, 309, 311, 313, 315, 317, 319, 
	321, 322, 323, 324, 325, 326, 327, 328, 
	329, 330, 331, 332, 333, 334, 335, 336, 
	337, 338, 339, 340, 341, 342, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 382, 384, 386, 388, 390, 392, 
	394, 396, 398, 400, 402, 404, 406, 408, 
	410, 412, 414, 416, 418, 420, 422, 424, 
	426, 428, 430, 432, 434, 436, 438, 440, 
	442, 444, 446, 448, 450, 452, 454, 456, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 486, 488, 
	490, 492, 493, 494, 495, 496, 497, 498, 
	499, 500, 501, 502, 503, 504, 505, 506, 
	507, 508, 509, 510, 511, 512, 513, 514, 
	515, 530, 532, 534, 536, 538, 540, 542, 
	544, 546, 548, 550, 552, 554, 556, 558, 
	560, 562, 564, 566, 568, 570, 572, 574, 
	576, 578, 580, 582, 584, 586, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 625, 626, 627, 628, 629, 630, 631, 
	632, 633, 650, 652, 654, 656, 658, 660, 
	662, 664, 666, 668, 670, 672, 674, 676, 
	678, 680, 682, 684, 686, 688, 690, 692, 
	694, 696, 698, 700, 702, 704, 706, 708, 
	710, 712, 714, 716, 718, 720, 722, 724, 
	726, 728, 730, 732, 734, 736, 738, 740, 
	742, 744, 746, 748, 750, 752, 754, 756, 
	758, 760, 762, 764, 766, 768, 770, 772, 
	774, 776, 778, 780, 782, 784, 786, 788, 
	790, 792, 794, 796, 798, 800, 802, 804, 
	806, 808, 810, 811, 812, 813, 814, 818, 
	824, 827, 829, 835, 855, 856, 857
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 67, 68, 70, 75, 76, 77, 83, 
	84, 124, 239, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 67, 68, 
	70, 75, 76, 77, 83, 84, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 112, 97, 98, 105, 108, 97, 
	97, 103, 105, 111, 110, 116, 111, 104, 
	32, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, 10, 117, 10, 110, 10, 
	103, 10, 115, 10, 105, 10, 58, 10, 
	32, 34, 35, 37, 42, 64, 65, 66, 
	67, 68, 70, 75, 76, 77, 83, 84, 
	124, 9, 13, 97, 110, 117, 110, 103, 
	115, 105, 58, 10, 10, 10, 32, 35, 
	37, 64, 67, 70, 76, 77, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 111, 10, 
	110, 10, 116, 10, 111, 10, 104, 10, 
	32, 10, 58, 10, 117, 10, 110, 10, 
	103, 10, 115, 10, 105, 10, 97, 10, 
	116, 10, 97, 10, 114, 10, 32, 10, 
	66, 10, 101, 10, 108, 10, 97, 10, 
	107, 10, 97, 10, 110, 10, 103, 10, 
	101, 10, 110, 10, 103, 10, 103, 10, 
	97, 10, 114, 10, 105, 10, 115, 10, 
	107, 10, 97, 10, 110, 10, 32, 10, 
	83, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 101, 109, 117, 100, 105, 97, 116, 
	97, 114, 32, 66, 101, 108, 97, 107, 
	97, 110, 103, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 66, 68, 70, 
	75, 77, 83, 84, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 112, 10, 97, 
	10, 98, 10, 105, 10, 108, 10, 97, 
	10, 97, 10, 103, 10, 105, 10, 97, 
	10, 110, 10, 117, 10, 110, 10, 103, 
	10, 115, 10, 105, 10, 58, 10, 101, 
	10, 109, 10, 117, 10, 100, 10, 105, 
	10, 101, 10, 110, 10, 103, 10, 103, 
	10, 97, 10, 114, 10, 105, 10, 115, 
	10, 107, 10, 97, 10, 110, 10, 32, 
	10, 83, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 32, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 101, 10, 116, 
	10, 97, 10, 112, 101, 110, 103, 103, 
	97, 114, 105, 115, 107, 97, 110, 32, 
	83, 101, 110, 97, 114, 105, 111, 32, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 66, 68, 70, 75, 83, 84, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 112, 10, 97, 10, 98, 10, 105, 
	10, 108, 10, 97, 10, 97, 10, 103, 
	10, 105, 10, 97, 10, 110, 10, 117, 
	10, 110, 10, 103, 10, 115, 10, 105, 
	10, 58, 10, 101, 10, 109, 10, 117, 
	10, 100, 10, 105, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 101, 10, 116, 10, 97, 10, 112, 
	101, 110, 97, 114, 105, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	66, 68, 70, 75, 76, 77, 83, 84, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 112, 10, 97, 10, 98, 10, 105, 
	10, 108, 10, 97, 10, 97, 10, 103, 
	10, 105, 10, 97, 10, 110, 10, 117, 
	10, 110, 10, 103, 10, 115, 10, 105, 
	10, 58, 10, 101, 10, 109, 10, 117, 
	10, 100, 10, 105, 10, 97, 10, 116, 
	10, 97, 10, 114, 10, 32, 10, 66, 
	10, 101, 10, 108, 10, 97, 10, 107, 
	10, 97, 10, 110, 10, 103, 10, 101, 
	10, 110, 10, 103, 10, 103, 10, 97, 
	10, 114, 10, 105, 10, 115, 10, 107, 
	10, 97, 10, 110, 10, 32, 10, 83, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 32, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 101, 10, 116, 10, 97, 
	10, 112, 101, 116, 97, 112, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 67, 68, 70, 75, 
	76, 77, 83, 84, 124, 9, 13, 187, 
	191, 0
];

var _lexer_single_lengths = [
	0, 19, 18, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 18, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 2, 4, 
	3, 2, 4, 18, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 21, 41, 43, 45, 48, 51, 
	56, 61, 66, 71, 75, 79, 82, 84, 
	86, 88, 90, 92, 94, 96, 98, 100, 
	102, 104, 106, 108, 110, 112, 114, 117, 
	120, 125, 132, 137, 139, 141, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 180, 183, 
	186, 189, 192, 195, 198, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	250, 253, 256, 259, 262, 265, 268, 271, 
	274, 277, 280, 283, 286, 289, 292, 295, 
	298, 301, 304, 307, 310, 313, 316, 319, 
	322, 325, 328, 331, 334, 337, 340, 343, 
	346, 349, 352, 355, 358, 361, 364, 367, 
	370, 373, 376, 379, 382, 385, 388, 391, 
	394, 397, 400, 403, 406, 409, 412, 415, 
	418, 421, 424, 427, 430, 433, 436, 439, 
	442, 444, 446, 448, 450, 452, 454, 456, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 500, 503, 
	506, 509, 512, 515, 518, 521, 524, 527, 
	530, 533, 536, 539, 542, 545, 548, 551, 
	554, 557, 560, 563, 566, 569, 572, 575, 
	578, 581, 584, 587, 590, 593, 596, 599, 
	602, 605, 608, 611, 614, 617, 620, 623, 
	626, 629, 632, 635, 638, 641, 644, 647, 
	650, 653, 656, 659, 662, 665, 668, 671, 
	674, 677, 680, 683, 686, 689, 692, 695, 
	698, 701, 703, 705, 707, 709, 711, 713, 
	715, 717, 719, 721, 723, 725, 727, 729, 
	731, 733, 735, 737, 739, 741, 743, 745, 
	747, 762, 765, 768, 771, 774, 777, 780, 
	783, 786, 789, 792, 795, 798, 801, 804, 
	807, 810, 813, 816, 819, 822, 825, 828, 
	831, 834, 837, 840, 843, 846, 849, 852, 
	855, 858, 861, 864, 867, 870, 873, 876, 
	879, 882, 885, 888, 891, 894, 897, 900, 
	903, 905, 907, 909, 911, 913, 915, 917, 
	919, 921, 938, 941, 944, 947, 950, 953, 
	956, 959, 962, 965, 968, 971, 974, 977, 
	980, 983, 986, 989, 992, 995, 998, 1001, 
	1004, 1007, 1010, 1013, 1016, 1019, 1022, 1025, 
	1028, 1031, 1034, 1037, 1040, 1043, 1046, 1049, 
	1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073, 
	1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 
	1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 
	1124, 1127, 1130, 1133, 1136, 1139, 1142, 1145, 
	1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 
	1172, 1175, 1178, 1180, 1182, 1184, 1186, 1190, 
	1196, 1200, 1203, 1209, 1229, 1231, 1233
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 19, 1, 0, 2, 1, 3, 
	4, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 18, 1, 
	0, 20, 0, 21, 0, 23, 24, 22, 
	26, 27, 25, 30, 29, 31, 29, 28, 
	34, 33, 35, 33, 32, 34, 33, 36, 
	33, 32, 34, 33, 37, 33, 32, 39, 
	38, 38, 0, 2, 40, 40, 0, 42, 
	43, 41, 2, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	58, 0, 60, 61, 59, 63, 64, 62, 
	0, 0, 0, 0, 65, 66, 67, 66, 
	66, 69, 68, 65, 2, 70, 7, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 76, 0, 79, 0, 80, 0, 81, 
	0, 82, 0, 83, 0, 84, 0, 85, 
	0, 87, 86, 89, 88, 89, 90, 91, 
	92, 91, 90, 88, 89, 93, 88, 89, 
	94, 88, 89, 95, 88, 89, 96, 88, 
	89, 97, 88, 89, 98, 88, 100, 99, 
	101, 102, 103, 104, 105, 106, 107, 108, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	99, 0, 117, 0, 76, 0, 118, 0, 
	119, 0, 120, 0, 121, 0, 122, 0, 
	123, 0, 125, 124, 127, 126, 127, 128, 
	129, 130, 129, 131, 132, 133, 134, 135, 
	128, 126, 127, 136, 126, 127, 137, 126, 
	127, 138, 126, 127, 139, 126, 127, 140, 
	126, 127, 141, 126, 127, 142, 126, 127, 
	143, 126, 127, 144, 126, 127, 145, 126, 
	127, 146, 126, 127, 147, 126, 127, 148, 
	126, 127, 149, 126, 127, 150, 126, 127, 
	151, 126, 127, 152, 126, 127, 153, 126, 
	127, 154, 126, 127, 155, 126, 127, 156, 
	126, 127, 157, 126, 127, 158, 126, 127, 
	159, 126, 127, 160, 126, 127, 155, 126, 
	127, 161, 126, 127, 162, 126, 127, 163, 
	126, 127, 164, 126, 127, 165, 126, 127, 
	166, 126, 127, 167, 126, 127, 168, 126, 
	127, 169, 126, 127, 170, 126, 127, 171, 
	126, 127, 172, 126, 127, 155, 126, 127, 
	173, 126, 127, 174, 126, 127, 175, 126, 
	127, 176, 126, 127, 177, 126, 127, 178, 
	126, 127, 179, 126, 127, 180, 126, 127, 
	181, 126, 127, 182, 126, 127, 183, 126, 
	127, 184, 126, 127, 185, 126, 127, 186, 
	126, 127, 187, 126, 127, 188, 126, 127, 
	189, 126, 127, 190, 126, 127, 154, 126, 
	127, 191, 126, 127, 192, 126, 127, 193, 
	126, 127, 194, 126, 127, 195, 126, 127, 
	155, 126, 196, 0, 197, 0, 198, 0, 
	199, 0, 200, 0, 201, 0, 202, 0, 
	203, 0, 204, 0, 205, 0, 206, 0, 
	207, 0, 208, 0, 209, 0, 210, 0, 
	211, 0, 212, 0, 213, 0, 214, 0, 
	216, 215, 218, 217, 218, 219, 220, 221, 
	222, 220, 223, 224, 225, 226, 227, 228, 
	229, 230, 219, 217, 218, 231, 217, 218, 
	232, 217, 218, 233, 217, 218, 234, 217, 
	218, 235, 217, 218, 236, 217, 218, 237, 
	217, 218, 238, 217, 218, 239, 217, 218, 
	240, 217, 218, 241, 217, 218, 242, 217, 
	218, 243, 217, 218, 244, 217, 218, 245, 
	217, 218, 246, 217, 218, 247, 217, 218, 
	248, 217, 218, 249, 217, 218, 250, 217, 
	218, 251, 217, 218, 252, 217, 218, 253, 
	217, 218, 251, 217, 218, 254, 217, 218, 
	251, 217, 218, 255, 217, 218, 256, 217, 
	218, 257, 217, 218, 258, 217, 218, 259, 
	217, 218, 245, 217, 218, 260, 217, 218, 
	261, 217, 218, 262, 217, 218, 263, 217, 
	218, 264, 217, 218, 265, 217, 218, 266, 
	217, 218, 267, 217, 218, 268, 217, 218, 
	269, 217, 218, 270, 217, 218, 271, 217, 
	218, 272, 217, 218, 273, 217, 218, 274, 
	217, 218, 275, 217, 218, 276, 217, 218, 
	277, 217, 218, 278, 217, 218, 279, 217, 
	218, 280, 217, 218, 281, 217, 218, 282, 
	217, 218, 283, 217, 218, 259, 217, 218, 
	284, 217, 218, 285, 217, 218, 286, 217, 
	218, 287, 217, 218, 288, 217, 218, 259, 
	217, 218, 289, 217, 218, 290, 217, 218, 
	291, 217, 218, 253, 217, 292, 0, 293, 
	0, 294, 0, 295, 0, 296, 0, 297, 
	0, 298, 0, 299, 0, 300, 0, 301, 
	0, 302, 0, 303, 0, 304, 0, 305, 
	0, 306, 0, 307, 0, 308, 0, 309, 
	0, 310, 0, 311, 0, 312, 0, 314, 
	313, 316, 315, 316, 317, 318, 319, 320, 
	318, 321, 322, 323, 324, 325, 326, 327, 
	317, 315, 316, 328, 315, 316, 329, 315, 
	316, 330, 315, 316, 331, 315, 316, 332, 
	315, 316, 333, 315, 316, 334, 315, 316, 
	335, 315, 316, 336, 315, 316, 337, 315, 
	316, 338, 315, 316, 339, 315, 316, 340, 
	315, 316, 341, 315, 316, 342, 315, 316, 
	343, 315, 316, 344, 315, 316, 345, 315, 
	316, 346, 315, 316, 347, 315, 316, 348, 
	315, 316, 349, 315, 316, 350, 315, 316, 
	348, 315, 316, 351, 315, 316, 348, 315, 
	316, 352, 315, 316, 353, 315, 316, 354, 
	315, 316, 355, 315, 316, 356, 315, 316, 
	342, 315, 316, 357, 315, 316, 358, 315, 
	316, 359, 315, 316, 360, 315, 316, 361, 
	315, 316, 362, 315, 316, 363, 315, 316, 
	364, 315, 316, 365, 315, 316, 366, 315, 
	316, 356, 315, 316, 367, 315, 316, 368, 
	315, 316, 369, 315, 316, 350, 315, 370, 
	0, 371, 0, 372, 0, 373, 0, 374, 
	0, 375, 0, 376, 0, 378, 377, 380, 
	379, 380, 381, 382, 383, 384, 382, 385, 
	386, 387, 388, 389, 390, 391, 392, 393, 
	381, 379, 380, 394, 379, 380, 395, 379, 
	380, 396, 379, 380, 397, 379, 380, 398, 
	379, 380, 399, 379, 380, 400, 379, 380, 
	401, 379, 380, 402, 379, 380, 403, 379, 
	380, 404, 379, 380, 405, 379, 380, 406, 
	379, 380, 407, 379, 380, 408, 379, 380, 
	409, 379, 380, 410, 379, 380, 411, 379, 
	380, 412, 379, 380, 413, 379, 380, 414, 
	379, 380, 415, 379, 380, 416, 379, 380, 
	414, 379, 380, 417, 379, 380, 414, 379, 
	380, 418, 379, 380, 419, 379, 380, 420, 
	379, 380, 421, 379, 380, 422, 379, 380, 
	408, 379, 380, 423, 379, 380, 424, 379, 
	380, 425, 379, 380, 426, 379, 380, 427, 
	379, 380, 428, 379, 380, 429, 379, 380, 
	430, 379, 380, 431, 379, 380, 432, 379, 
	380, 433, 379, 380, 434, 379, 380, 435, 
	379, 380, 436, 379, 380, 437, 379, 380, 
	438, 379, 380, 439, 379, 380, 422, 379, 
	380, 440, 379, 380, 441, 379, 380, 442, 
	379, 380, 443, 379, 380, 444, 379, 380, 
	445, 379, 380, 446, 379, 380, 447, 379, 
	380, 448, 379, 380, 449, 379, 380, 450, 
	379, 380, 451, 379, 380, 452, 379, 380, 
	453, 379, 380, 454, 379, 380, 455, 379, 
	380, 456, 379, 380, 457, 379, 380, 458, 
	379, 380, 422, 379, 380, 459, 379, 380, 
	460, 379, 380, 461, 379, 380, 462, 379, 
	380, 463, 379, 380, 422, 379, 380, 464, 
	379, 380, 465, 379, 380, 466, 379, 380, 
	416, 379, 467, 0, 468, 0, 469, 0, 
	78, 0, 470, 471, 470, 0, 474, 473, 
	475, 476, 473, 472, 0, 478, 479, 477, 
	0, 478, 477, 474, 480, 478, 479, 480, 
	477, 474, 481, 482, 483, 484, 485, 486, 
	487, 488, 489, 490, 491, 492, 493, 494, 
	495, 496, 497, 481, 0, 498, 0, 1, 
	0, 499, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 41, 44, 61, 63, 136, 141, 225, 
	296, 386, 390, 396, 4, 5, 6, 7, 
	6, 6, 7, 6, 8, 8, 8, 9, 
	8, 8, 8, 9, 10, 11, 12, 2, 
	12, 13, 2, 14, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	28, 398, 30, 31, 2, 14, 31, 2, 
	14, 33, 34, 2, 33, 32, 34, 36, 
	37, 38, 39, 40, 29, 42, 43, 45, 
	46, 47, 48, 49, 50, 51, 52, 53, 
	52, 53, 53, 2, 54, 55, 56, 57, 
	58, 59, 60, 2, 2, 3, 13, 15, 
	29, 32, 35, 41, 44, 61, 63, 136, 
	141, 225, 296, 386, 390, 62, 64, 65, 
	66, 67, 68, 69, 70, 71, 70, 71, 
	71, 2, 72, 86, 93, 98, 111, 130, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 2, 87, 88, 
	89, 90, 91, 92, 60, 94, 95, 96, 
	97, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 108, 109, 110, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 131, 
	132, 133, 134, 135, 137, 138, 139, 140, 
	61, 142, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 153, 154, 155, 156, 
	157, 156, 157, 157, 2, 158, 172, 173, 
	179, 182, 184, 190, 195, 215, 221, 159, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 2, 60, 174, 175, 
	176, 177, 178, 172, 180, 181, 183, 185, 
	186, 187, 188, 189, 191, 192, 193, 194, 
	182, 196, 197, 198, 199, 200, 201, 202, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 214, 216, 217, 218, 219, 
	220, 222, 223, 224, 226, 227, 228, 229, 
	230, 231, 232, 233, 234, 235, 236, 237, 
	238, 239, 240, 241, 242, 243, 244, 245, 
	246, 247, 248, 247, 248, 248, 2, 249, 
	263, 264, 270, 273, 275, 281, 286, 292, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	258, 259, 260, 261, 262, 2, 60, 265, 
	266, 267, 268, 269, 263, 271, 272, 274, 
	276, 277, 278, 279, 280, 282, 283, 284, 
	285, 273, 287, 288, 289, 290, 291, 293, 
	294, 295, 297, 298, 299, 300, 301, 302, 
	303, 304, 305, 304, 305, 305, 2, 306, 
	320, 321, 327, 330, 332, 338, 343, 356, 
	376, 382, 307, 308, 309, 310, 311, 312, 
	313, 314, 315, 316, 317, 318, 319, 2, 
	60, 322, 323, 324, 325, 326, 320, 328, 
	329, 331, 333, 334, 335, 336, 337, 339, 
	340, 341, 342, 330, 344, 345, 346, 347, 
	348, 349, 350, 351, 352, 353, 354, 355, 
	357, 358, 359, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 369, 370, 371, 372, 
	373, 374, 375, 377, 378, 379, 380, 381, 
	383, 384, 385, 387, 388, 389, 390, 391, 
	392, 394, 395, 393, 391, 392, 393, 391, 
	394, 395, 3, 13, 15, 29, 32, 35, 
	41, 44, 61, 63, 136, 141, 225, 296, 
	386, 390, 397, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 35, 0, 0, 0, 7, 139, 
	48, 0, 102, 9, 5, 45, 134, 45, 
	0, 33, 122, 33, 33, 0, 11, 106, 
	0, 0, 114, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 149, 126, 0, 110, 
	23, 0, 27, 118, 27, 51, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 21, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 72, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 0, 93, 90, 41, 96, 90, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 99, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 398;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

/* line 130 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

/* line 131 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      throw "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 744 "js/lib/gherkin/lexer/bm.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */
  
/* line 751 "js/lib/gherkin/lexer/bm.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 978 "js/lib/gherkin/lexer/bm.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1017 "js/lib/gherkin/lexer/bm.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/bm.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/bm', [], function() {
      return Lexer
    });
  } else {
    define('gherkin/lexer/bm', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
