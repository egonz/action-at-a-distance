
/* line 1 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sk.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 87, 
	89, 94, 101, 106, 108, 109, 110, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 130, 143, 145, 147, 149, 151, 
	153, 155, 157, 159, 161, 163, 165, 167, 
	169, 171, 173, 189, 191, 194, 195, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 215, 217, 219, 221, 223, 225, 227, 
	229, 231, 233, 235, 237, 239, 241, 243, 
	245, 247, 249, 251, 253, 255, 257, 259, 
	261, 263, 265, 267, 269, 271, 273, 275, 
	278, 281, 283, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	311, 313, 315, 317, 319, 321, 323, 325, 
	327, 329, 331, 332, 333, 334, 335, 336, 
	337, 338, 339, 340, 341, 342, 356, 358, 
	360, 362, 364, 366, 368, 370, 372, 374, 
	376, 378, 380, 382, 384, 386, 389, 391, 
	393, 395, 397, 399, 401, 403, 405, 407, 
	409, 411, 413, 415, 417, 419, 421, 423, 
	425, 427, 429, 431, 434, 436, 438, 440, 
	442, 444, 446, 448, 450, 452, 454, 456, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 475, 476, 477, 478, 479, 480, 481, 
	482, 483, 484, 491, 493, 495, 497, 499, 
	501, 503, 505, 507, 509, 511, 513, 514, 
	515, 516, 517, 518, 519, 520, 521, 522, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 593, 595, 597, 599, 
	601, 603, 605, 607, 609, 611, 615, 617, 
	619, 621, 623, 625, 627, 629, 631, 633, 
	635, 637, 639, 641, 643, 645, 647, 649, 
	651, 653, 655, 657, 659, 661, 663, 664, 
	665, 669, 675, 678, 680, 686, 702, 705, 
	707, 709, 711, 713, 715, 718, 720, 722, 
	724, 726, 728, 730, 732, 734, 736, 738, 
	740, 742, 744, 746, 748, 750, 752, 754, 
	756, 758, 760, 761, 762
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	75, 78, 80, 83, 84, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 80, 83, 84, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 32, 108, 101, 101, -60, -113, 
	-61, -95, -60, -115, 114, 116, 32, 83, 
	99, 101, 110, -61, -95, 114, 117, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 75, 80, 83, 84, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 32, 34, 
	35, 37, 42, 64, 65, 75, 78, 80, 
	83, 84, 124, 9, 13, 111, 114, -59, 
	107, 122, -66, 105, 97, 100, 97, 118, 
	107, 97, 58, 10, 10, 10, 32, 35, 
	37, 64, 78, 80, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -61, 10, -95, 10, -60, 
	10, -115, 10, 10, 114, 10, 116, 10, 
	32, 10, 83, 10, 99, 10, 101, 10, 
	110, -61, 10, -95, 10, 10, 114, 10, 
	117, 10, 58, 10, 111, 114, -59, 10, 
	122, -66, 10, 10, 105, 10, 97, 10, 
	100, 10, 97, 10, 118, 10, 107, 10, 
	97, 10, 97, 10, 100, 10, 105, 10, 
	101, -61, 10, -83, 10, 10, 107, 10, 
	108, 10, 97, 10, 100, 10, 121, 10, 
	99, 10, 101, 10, 110, -61, 10, -95, 
	10, 10, 114, 105, 97, -60, -66, 97, 
	100, 105, 101, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 75, 78, 80, 
	83, 84, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 32, 108, 10, 101, 10, 
	101, -60, 10, -113, 10, -61, 10, -95, 
	10, -60, 10, -115, 10, 10, 114, 10, 
	116, 10, 32, 10, 83, 10, 99, 10, 
	101, 10, 110, -61, 10, -95, 10, 10, 
	114, 10, 117, 10, 58, 10, 111, -59, 
	10, 107, -66, 10, 10, 105, 10, 97, 
	10, 100, 10, 97, 10, 118, 10, 107, 
	10, 97, 10, 105, 10, 97, -60, 10, 
	-66, 10, 10, 99, 10, 101, 10, 110, 
	-61, 10, -95, 10, 10, 114, 10, 97, 
	10, 107, -61, -83, 107, 108, 97, 100, 
	121, 58, 10, 10, 10, 32, 35, 80, 
	124, 9, 13, 10, 111, -59, 10, -66, 
	10, 10, 105, 10, 97, 10, 100, 10, 
	97, 10, 118, 10, 107, 10, 97, 10, 
	58, 99, 101, 110, -61, -95, 114, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 75, 78, 80, 83, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	108, 10, 101, 10, 101, -60, 10, -113, 
	10, -61, 10, -95, 10, -60, 10, -115, 
	10, 10, 114, 10, 116, 10, 32, 10, 
	83, 10, 99, 10, 101, 10, 110, -61, 
	10, -95, 10, 10, 114, 10, 117, 10, 
	58, 10, 111, -59, 10, 107, 122, -66, 
	10, 10, 105, 10, 97, 10, 100, 10, 
	97, 10, 118, 10, 107, 10, 97, 10, 
	105, 10, 97, -60, 10, -66, 10, 10, 
	97, 10, 100, 10, 105, 10, 101, 10, 
	99, 10, 101, 10, 110, -61, 10, -95, 
	10, 10, 114, 10, 97, 10, 107, 97, 
	107, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, 10, 32, 
	34, 35, 37, 42, 64, 65, 75, 78, 
	80, 83, 84, 124, 9, 13, 10, 32, 
	108, 10, 101, 10, 101, -60, 10, -113, 
	10, 10, 111, -59, 10, 107, -66, 10, 
	10, 105, 10, 97, 10, 100, 10, 97, 
	10, 118, 10, 107, 10, 97, 10, 58, 
	10, 105, 10, 97, -60, 10, -66, 10, 
	10, 99, 10, 101, 10, 110, -61, 10, 
	-95, 10, 10, 114, 10, 97, 10, 107, 
	187, 191, 0
];

var _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 14, 2, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	8, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 12, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	2, 4, 3, 2, 4, 14, 3, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	112, 117, 124, 129, 132, 134, 136, 138, 
	140, 142, 144, 146, 148, 150, 152, 154, 
	156, 158, 160, 162, 164, 166, 168, 170, 
	172, 174, 176, 189, 192, 195, 198, 201, 
	204, 207, 210, 213, 216, 219, 222, 225, 
	228, 231, 234, 250, 253, 257, 259, 261, 
	263, 265, 267, 269, 271, 273, 275, 277, 
	279, 289, 292, 295, 298, 301, 304, 307, 
	310, 313, 316, 319, 322, 325, 328, 331, 
	334, 337, 340, 343, 346, 349, 352, 355, 
	358, 361, 364, 367, 370, 373, 376, 379, 
	383, 387, 390, 393, 396, 399, 402, 405, 
	408, 411, 414, 417, 420, 423, 426, 429, 
	432, 435, 438, 441, 444, 447, 450, 453, 
	456, 459, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 498, 501, 
	504, 507, 510, 513, 516, 519, 522, 525, 
	528, 531, 534, 537, 540, 543, 547, 550, 
	553, 556, 559, 562, 565, 568, 571, 574, 
	577, 580, 583, 586, 589, 592, 595, 598, 
	601, 604, 607, 610, 614, 617, 620, 623, 
	626, 629, 632, 635, 638, 641, 644, 647, 
	650, 653, 656, 659, 662, 665, 668, 671, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 701, 704, 707, 710, 713, 
	716, 719, 722, 725, 728, 731, 734, 736, 
	738, 740, 742, 744, 746, 748, 750, 752, 
	766, 769, 772, 775, 778, 781, 784, 787, 
	790, 793, 796, 799, 802, 805, 808, 811, 
	815, 818, 821, 824, 827, 830, 833, 836, 
	839, 842, 845, 848, 851, 854, 857, 860, 
	863, 866, 869, 872, 875, 878, 883, 886, 
	889, 892, 895, 898, 901, 904, 907, 910, 
	913, 916, 919, 922, 925, 928, 931, 934, 
	937, 940, 943, 946, 949, 952, 955, 957, 
	959, 963, 969, 973, 976, 982, 998, 1002, 
	1005, 1008, 1011, 1014, 1017, 1021, 1024, 1027, 
	1030, 1033, 1036, 1039, 1042, 1045, 1048, 1051, 
	1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 
	1078, 1081, 1084, 1086, 1088
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 56, 57, 55, 59, 60, 58, 
	0, 0, 0, 0, 61, 62, 63, 62, 
	62, 65, 64, 61, 2, 66, 7, 66, 
	0, 54, 67, 0, 68, 0, 69, 0, 
	70, 0, 68, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 80, 0, 
	81, 0, 82, 0, 83, 0, 84, 0, 
	85, 0, 86, 0, 88, 87, 90, 89, 
	90, 91, 92, 93, 94, 92, 95, 96, 
	97, 98, 99, 91, 89, 90, 100, 89, 
	90, 101, 89, 90, 102, 89, 90, 103, 
	89, 90, 104, 89, 90, 105, 89, 90, 
	106, 89, 90, 107, 89, 90, 108, 89, 
	90, 109, 89, 90, 110, 89, 90, 111, 
	89, 90, 112, 89, 90, 113, 89, 90, 
	114, 89, 116, 115, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	115, 0, 129, 130, 0, 131, 132, 133, 
	0, 134, 0, 135, 0, 136, 0, 137, 
	0, 138, 0, 139, 0, 140, 0, 141, 
	0, 142, 0, 144, 143, 146, 145, 146, 
	147, 148, 149, 148, 150, 151, 152, 147, 
	145, 146, 153, 145, 146, 154, 145, 146, 
	155, 145, 146, 156, 145, 146, 157, 145, 
	146, 158, 145, 146, 159, 145, 146, 160, 
	145, 146, 161, 145, 146, 162, 145, 146, 
	163, 145, 146, 164, 145, 146, 165, 145, 
	146, 166, 145, 167, 146, 145, 168, 146, 
	145, 169, 146, 145, 170, 146, 145, 146, 
	171, 145, 146, 172, 145, 146, 173, 145, 
	146, 174, 145, 146, 175, 145, 146, 176, 
	145, 146, 177, 145, 178, 146, 145, 179, 
	146, 145, 146, 180, 145, 146, 181, 145, 
	146, 182, 145, 146, 183, 184, 145, 185, 
	146, 186, 145, 187, 146, 145, 146, 188, 
	145, 146, 189, 145, 146, 190, 145, 146, 
	191, 145, 146, 192, 145, 146, 193, 145, 
	146, 181, 145, 146, 194, 145, 146, 195, 
	145, 146, 196, 145, 146, 181, 145, 197, 
	146, 145, 198, 146, 145, 146, 199, 145, 
	146, 200, 145, 146, 201, 145, 146, 202, 
	145, 146, 181, 145, 146, 203, 145, 146, 
	204, 145, 146, 205, 145, 206, 146, 145, 
	207, 146, 145, 146, 181, 145, 208, 0, 
	209, 0, 210, 0, 68, 0, 211, 0, 
	212, 0, 213, 0, 214, 0, 215, 0, 
	217, 216, 219, 218, 219, 220, 221, 222, 
	223, 221, 224, 225, 226, 227, 228, 229, 
	220, 218, 219, 230, 218, 219, 231, 218, 
	219, 232, 218, 219, 233, 218, 219, 234, 
	218, 219, 235, 218, 219, 236, 218, 219, 
	237, 218, 219, 238, 218, 219, 239, 218, 
	219, 240, 218, 219, 241, 218, 219, 242, 
	218, 219, 243, 218, 219, 244, 218, 219, 
	244, 245, 218, 219, 246, 218, 219, 247, 
	218, 248, 219, 218, 246, 219, 218, 249, 
	219, 218, 250, 219, 218, 251, 219, 218, 
	252, 219, 218, 219, 253, 218, 219, 254, 
	218, 219, 255, 218, 219, 256, 218, 219, 
	257, 218, 219, 258, 218, 219, 259, 218, 
	260, 219, 218, 261, 219, 218, 219, 262, 
	218, 219, 263, 218, 219, 244, 218, 219, 
	264, 218, 265, 219, 266, 218, 267, 219, 
	218, 219, 268, 218, 219, 269, 218, 219, 
	270, 218, 219, 271, 218, 219, 272, 218, 
	219, 273, 218, 219, 263, 218, 219, 274, 
	218, 219, 275, 218, 276, 219, 218, 246, 
	219, 218, 219, 277, 218, 219, 278, 218, 
	219, 279, 218, 280, 219, 218, 281, 219, 
	218, 219, 263, 218, 219, 282, 218, 219, 
	246, 218, 283, 0, 284, 0, 285, 0, 
	286, 0, 287, 0, 288, 0, 289, 0, 
	290, 0, 292, 291, 294, 293, 294, 295, 
	296, 297, 296, 295, 293, 294, 298, 293, 
	299, 294, 293, 300, 294, 293, 294, 301, 
	293, 294, 302, 293, 294, 303, 293, 294, 
	304, 293, 294, 305, 293, 294, 306, 293, 
	294, 307, 293, 294, 308, 293, 309, 0, 
	310, 0, 311, 0, 312, 0, 313, 0, 
	314, 0, 315, 0, 317, 316, 319, 318, 
	319, 320, 321, 322, 323, 321, 324, 325, 
	326, 327, 328, 329, 320, 318, 319, 330, 
	318, 319, 331, 318, 319, 332, 318, 319, 
	333, 318, 319, 334, 318, 319, 335, 318, 
	319, 336, 318, 319, 337, 318, 319, 338, 
	318, 319, 339, 318, 319, 340, 318, 319, 
	341, 318, 319, 342, 318, 319, 343, 318, 
	319, 344, 318, 319, 344, 345, 318, 319, 
	346, 318, 319, 347, 318, 348, 319, 318, 
	346, 319, 318, 349, 319, 318, 350, 319, 
	318, 351, 319, 318, 352, 319, 318, 319, 
	353, 318, 319, 354, 318, 319, 355, 318, 
	319, 356, 318, 319, 357, 318, 319, 358, 
	318, 319, 359, 318, 360, 319, 318, 361, 
	319, 318, 319, 362, 318, 319, 363, 318, 
	319, 344, 318, 319, 364, 318, 365, 319, 
	366, 367, 318, 368, 319, 318, 319, 369, 
	318, 319, 370, 318, 319, 371, 318, 319, 
	372, 318, 319, 373, 318, 319, 374, 318, 
	319, 363, 318, 319, 375, 318, 319, 376, 
	318, 377, 319, 318, 346, 319, 318, 319, 
	378, 318, 319, 379, 318, 319, 380, 318, 
	319, 363, 318, 319, 381, 318, 319, 382, 
	318, 319, 383, 318, 384, 319, 318, 385, 
	319, 318, 319, 363, 318, 319, 386, 318, 
	319, 346, 318, 387, 0, 68, 0, 388, 
	389, 388, 0, 392, 391, 393, 394, 391, 
	390, 0, 396, 397, 395, 0, 396, 395, 
	392, 398, 396, 397, 398, 395, 392, 399, 
	400, 401, 402, 403, 404, 405, 406, 407, 
	408, 409, 410, 411, 399, 0, 90, 114, 
	412, 89, 90, 413, 89, 90, 414, 89, 
	415, 90, 89, 413, 90, 89, 90, 416, 
	89, 417, 90, 418, 89, 419, 90, 89, 
	90, 420, 89, 90, 421, 89, 90, 422, 
	89, 90, 423, 89, 90, 424, 89, 90, 
	425, 89, 90, 426, 89, 90, 114, 89, 
	90, 427, 89, 90, 428, 89, 429, 90, 
	89, 413, 90, 89, 90, 430, 89, 90, 
	431, 89, 90, 432, 89, 433, 90, 89, 
	434, 90, 89, 90, 426, 89, 90, 435, 
	89, 90, 413, 89, 436, 0, 1, 0, 
	437, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 40, 75, 238, 310, 312, 346, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 348, 30, 31, 
	2, 14, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 29, 38, 39, 41, 
	42, 43, 44, 45, 46, 47, 48, 49, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 57, 58, 58, 2, 59, 73, 318, 
	320, 323, 338, 344, 60, 61, 62, 63, 
	64, 65, 66, 67, 68, 69, 70, 71, 
	72, 2, 74, 2, 2, 3, 13, 15, 
	29, 32, 35, 37, 40, 75, 238, 310, 
	312, 76, 216, 77, 146, 150, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 87, 88, 88, 2, 89, 103, 119, 
	140, 90, 91, 92, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 2, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 74, 120, 
	133, 121, 129, 122, 123, 124, 125, 126, 
	127, 128, 130, 131, 132, 134, 135, 136, 
	137, 138, 139, 141, 142, 143, 144, 145, 
	147, 148, 149, 151, 152, 153, 154, 155, 
	156, 157, 156, 157, 157, 2, 158, 172, 
	173, 175, 178, 194, 208, 214, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 2, 74, 174, 172, 176, 
	177, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	195, 196, 204, 197, 198, 199, 200, 201, 
	202, 203, 205, 206, 207, 209, 210, 211, 
	212, 213, 215, 217, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 225, 226, 226, 
	2, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 74, 239, 240, 241, 
	242, 243, 244, 245, 246, 247, 246, 247, 
	247, 2, 248, 262, 263, 265, 268, 284, 
	302, 308, 249, 250, 251, 252, 253, 254, 
	255, 256, 257, 258, 259, 260, 261, 2, 
	74, 264, 262, 266, 267, 269, 270, 271, 
	272, 273, 274, 275, 276, 277, 278, 279, 
	280, 281, 282, 283, 285, 286, 294, 298, 
	287, 288, 289, 290, 291, 292, 293, 295, 
	296, 297, 299, 300, 301, 303, 304, 305, 
	306, 307, 309, 311, 312, 313, 314, 316, 
	317, 315, 313, 314, 315, 313, 316, 317, 
	3, 13, 15, 29, 32, 35, 37, 40, 
	75, 238, 310, 312, 319, 73, 321, 322, 
	324, 325, 334, 326, 327, 328, 329, 330, 
	331, 332, 333, 335, 336, 337, 339, 340, 
	341, 342, 343, 345, 347, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 139, 48, 0, 102, 9, 
	5, 45, 134, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	149, 126, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 72, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 0, 
	93, 90, 41, 96, 90, 96, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 348;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

/* line 130 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

/* line 131 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      throw "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 668 "js/lib/gherkin/lexer/sk.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */
  
/* line 675 "js/lib/gherkin/lexer/sk.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 902 "js/lib/gherkin/lexer/sk.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 941 "js/lib/gherkin/lexer/sk.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/github/gherkin/tasks/../ragel/i18n/sk.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/sk', [], function() {
      return Lexer
    });
  } else {
    define('gherkin/lexer/sk', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
